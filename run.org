# -*- after-save-hook: (org-babel-tangle);-*-
#+PROPERTY: header-args :tangle "./init.el"

* Bootstrap ~straight.el~
#+begin_src emacs-lisp :tangle "./early-init.el"
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

* Raise GC threshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024))
#+end_src

* Directories & Customize
#+begin_src emacs-lisp
  (setq default-directory "~/")
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

* Disable clutter
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)

  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)

  (fringe-mode 20)

  (add-to-list 'default-frame-alist '(undecorated . t))
  (setq frame-title-format '("%b (emacs@" system-name ")"))

  ;; remove dialog "Risky local variables"
  (defun risky-local-variable-p (sym &optional _ignored) nil)
#+end_src

* Fonts & Theme
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Roboto Mono" :height
   140 :weight 'normal)
  (load-theme 'modus-operandi)
#+end_src

* Org
#+begin_src emacs-lisp
  (use-package org
    :defer
    :init
    (add-hook 'org-mode-hook 'org-indent-mode)
    (require 'org-tempo)
    :config
    (setq org-directory "~/doc/org")
    (setq org-agenda-files (list "inbox.org"))
    (setq org-capture-templates
          `(("i" "inbox" entry (file "inbox.org")
             ,(concat "* TODO %?\n"
                      "/Entered on/ %U"))))
    (setq org-startup-folded t)
    (setq org-special-ctrl-a/e t)
    (setq calendar-week-start-day 1)
    :bind (("C-c c" . 'org-capture)
           ("C-c a" . 'org-agenda)))
#+end_src

* Editing behaviour
#+begin_src emacs-lisp
  (global-auto-revert-mode)
  (setq tab-width 4)

  (setq-default auto-fill-function 'do-auto-fill)
  (setq-default fill-column 80)
#+end_src

* Rust
#+begin_src emacs-lisp
  (use-package rustic
    :defer)

  (add-hook 'rust-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
#+end_src

* PDFTools
#+begin_src emacs-lisp
  (use-package pdf-tools)
#+end_src

* EAF
#+begin_src emacs-lisp
  (use-package eaf
    :straight (eaf
               :type git
               :host github
               :repo "emacs-eaf/emacs-application-framework"           
               :files ("*.el" "*.py" "core" "app" "*.json")
               :includes (eaf-pdf-viewer eaf-browser) ; Straight won't try to search for these packages when we make further use-package invocations for them
               :pre-build (("python" "install-eaf.py" "--install" "pdf-viewer" "browser" "--ignore-sys-deps"))))
#+end_src

* Startup profiling
#+begin_src emacs-lisp
  (use-package esup
    :defer
    :init
    (setq esup-depth 0))
#+end_src
